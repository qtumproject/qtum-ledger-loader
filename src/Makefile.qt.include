# Copyright (c) 2013-2016 The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

bin_PROGRAMS += qt/qtum_loader-qt

EXTRA_LIBRARIES += qt/libbitcoinqt.a

QT_FORMS_UI = \
  qt/forms/qtumledgerinstallerdialog.ui

QT_MOC_CPP = \
  qt/moc_qtumledgerinstallerdialog.cpp \
  qt/moc_qtumledgertool.cpp \
  qt/moc_waitmessagebox.cpp

BITCOIN_MM = \
  qt/macdockiconhandler.mm \
  qt/macnotificationhandler.mm \
  qt/macos_appnap.mm

QT_MOC = 

QT_QRC_CPP = qt/qrc_qtum.cpp
QT_QRC = qt/qtum.qrc

BITCOIN_QT_H = \
  qt/qtumledgerinstallerdialog.h \
  qt/waitmessagebox.h \
  qt/qtumledgertool.h

RES_ICONS = \
  qt/res/icons/bitcoin.ico \
  qt/res/icons/bitcoin_testnet.ico \
  qt/res/icons/bitcoin.png

BITCOIN_QT_BASE_CPP = \
  qt/qtumledgertool.cpp \
  qt/qtumledgerinstallerdialog.cpp \
  qt/waitmessagebox.cpp

BITCOIN_QT_WINDOWS_CPP = qt/winshutdownmonitor.cpp


BITCOIN_QT_CPP = $(BITCOIN_QT_BASE_CPP)
if TARGET_WINDOWS
BITCOIN_QT_CPP += $(BITCOIN_QT_WINDOWS_CPP)
endif

RES_LEDGER = qt/res/ledger/nanos_app.hex \
qt/res/ledger/nanos_load.txt \
qt/res/ledger/nanos_delete.txt \
qt/res/ledger/nanos_stake_app.hex \
qt/res/ledger/nanos_stake_load.txt \
qt/res/ledger/nanos_stake_delete.txt \
qt/res/ledger/nanos_test_app.hex \
qt/res/ledger/nanos_test_load.txt \
qt/res/ledger/nanos_test_delete.txt \
qt/res/ledger/nanos_stake_test_app.hex \
qt/res/ledger/nanos_stake_test_load.txt \
qt/res/ledger/nanos_stake_test_delete.txt

BITCOIN_RC = qt/res/qtum-res.rc

BITCOIN_QT_INCLUDES = -DQT_NO_KEYWORDS

qt_libbitcoinqt_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \
  $(QT_INCLUDES) $(QT_DBUS_INCLUDES) $(QR_CFLAGS)
qt_libbitcoinqt_a_CXXFLAGS = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)
qt_libbitcoinqt_a_OBJCXXFLAGS = $(AM_OBJCXXFLAGS) $(QT_PIE_FLAGS)

qt_libbitcoinqt_a_SOURCES = $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(QT_FORMS_UI) \
  $(QT_QRC) $(QT_TS) $(RES_ICONS) $(RES_LEDGER)
if TARGET_DARWIN
  qt_libbitcoinqt_a_SOURCES += $(BITCOIN_MM)
endif

nodist_qt_libbitcoinqt_a_SOURCES = $(QT_MOC_CPP) $(QT_MOC) $(QT_QRC_CPP)

# forms/foo.h -> forms/ui_foo.h
QT_FORMS_H=$(join $(dir $(QT_FORMS_UI)),$(addprefix ui_, $(notdir $(QT_FORMS_UI:.ui=.h))))

# Most files will depend on the forms and moc files as includes. Generate them
# before anything else.
$(QT_MOC): $(QT_FORMS_H)
$(qt_libbitcoinqt_a_OBJECTS) $(qt_qtum_qt_OBJECTS) $(qtum_gui_OBJECTS) : | $(QT_MOC)

# qtum-qt and qtum-gui binaries #
qtum_qt_cppflags = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \
  $(QT_INCLUDES) $(QR_CFLAGS)
qtum_qt_cxxflags = $(AM_CXXFLAGS) $(QT_PIE_FLAGS)

qtum_qt_sources = qt/main.cpp
if TARGET_WINDOWS
  qtum_qt_sources += $(BITCOIN_RC)
endif
qtum_qt_ldadd = qt/libbitcoinqt.a
qtum_qt_ldadd += $(LIBBITCOIN_UTIL) $(QT_LIBS) $(QT_DBUS_LIBS)
qtum_qt_ldflags = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) $(PTHREAD_FLAGS)
qtum_qt_libtoolflags = $(AM_LIBTOOLFLAGS) --tag CXX

qt_qtum_qt_CPPFLAGS = $(qtum_qt_cppflags)
qt_qtum_qt_CXXFLAGS = $(qtum_qt_cxxflags)
qt_qtum_qt_SOURCES = $(qtum_qt_sources)
qt_qtum_qt_LDADD = $(qtum_qt_ldadd)
qt_qtum_qt_LDFLAGS = $(qtum_qt_ldflags)
qt_qtum_qt_LIBTOOLFLAGS = $(qtum_qt_libtoolflags)

qtum_gui_CPPFLAGS = $(qtum_qt_cppflags)
qtum_gui_CXXFLAGS = $(qtum_qt_cxxflags)
qtum_gui_SOURCES = $(qtum_qt_sources)
qtum_gui_LDADD = $(qtum_qt_ldadd)
qtum_gui_LDFLAGS = $(qtum_qt_ldflags)
qtum_gui_LIBTOOLFLAGS = $(qtum_qt_libtoolflags)

#locale/foo.ts -> locale/foo.qm
QT_QM=$(QT_TS:.ts=.qm)

SECONDARY: $(QT_QM)

translate: $(QT_FORMS_UI) $(QT_FORMS_UI) $(BITCOIN_QT_BASE_CPP) qt/loader.cpp $(BITCOIN_QT_WINDOWS_CPP) $(BITCOIN_QT_H) $(BITCOIN_MM)
	@test -n $(LUPDATE) || echo "lupdate is required for updating translations"
	$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(LUPDATE) $^ -locations relative -no-obsolete -ts $(srcdir)/qt/locale/qtum_en.ts

$(QT_QRC_CPP): $(QT_QRC) $(QT_FORMS_H) $(RES_ICONS) $(RES_LEDGER)
	@test -f $(RCC)
	$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(RCC) -name qtum $< | \
	  $(SED) -e '/^\*\*.*Created:/d' -e '/^\*\*.*by:/d' > $@

CLEAN_QT = $(nodist_qt_libbitcoinqt_a_SOURCES) $(QT_QM) $(QT_FORMS_H) qt/*.gcda qt/*.gcno

CLEANFILES += $(CLEAN_QT)

bitcoin_qt_clean: FORCE
	rm -f $(CLEAN_QT) $(qt_libbitcoinqt_a_OBJECTS) $(qt_qtum_qt_OBJECTS) qt/qtum_loader-qt$(EXEEXT) $(LIBBITCOINQT)

bitcoin_qt : qt/qtum_loader-qt$(EXEEXT)

ui_%.h: %.ui
	@test -f $(UIC)
	@$(MKDIR_P) $(@D)
	$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(UIC) -o $@ $< || (echo "Error creating $@"; false)

%.moc: %.cpp
	$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(MOC) $(DEFAULT_INCLUDES) $(QT_INCLUDES_UNSUPPRESSED) $(MOC_DEFS) $< | \
	  $(SED) -e '/^\*\*.*Created:/d' -e '/^\*\*.*by:/d' > $@

moc_%.cpp: %.h
	$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(MOC) $(DEFAULT_INCLUDES) $(QT_INCLUDES_UNSUPPRESSED) $(MOC_DEFS) $< | \
	  $(SED) -e '/^\*\*.*Created:/d' -e '/^\*\*.*by:/d' > $@

%.qm: %.ts
	@test -f $(LRELEASE)
	@$(MKDIR_P) $(@D)
	$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(LRELEASE) -silent $< -qm $@
